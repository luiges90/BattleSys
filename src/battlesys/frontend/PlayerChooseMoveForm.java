/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * playerChooseMove.java
 *
 * Created on 2011年2月26日, 下午05:43:06
 */
package battlesys.frontend;

import battlesys.*;
import java.util.*;

/**
 *
 * @author Peter
 */
public class PlayerChooseMoveForm extends javax.swing.JFrame {

    static final String APP_NAME = PlayerInputterForm.APP_NAME;

    private class nameCostPair{
        private int cost;
        private String output;
    }
    private class moveStringClass{
        private nameCostPair str;
        private Move move;
    }
    private moveStringClass moveStrings[];
    int costOnSelectedMoves;
    PlayerInputterForm inputter;

    /** Creates new form playerChooseMove */
    public PlayerChooseMoveForm() {
        List<Move> moves = Move.getAllPublicMoves();
        moveStrings = new moveStringClass[moves.size()];
        for (int i = 0; i < moves.size(); ++i){
            moveStrings[i] = new moveStringClass();
            moveStrings[i].move = moves.get(i);
            moveStrings[i].str = new nameCostPair();
            moveStrings[i].str.cost = moves.get(i).getCost();
            moveStrings[i].str.output = moves.get(i).getName() + "﹝需要點數：" + moveStrings[i].str.cost + "﹞";
        }
        Arrays.sort(moveStrings, new Comparator<moveStringClass>(){
            public int compare(moveStringClass o1, moveStringClass o2){
                return o1.str.cost - o2.str.cost;
            }
        });
        initComponents();
    }

    Move getMoveFromIndex(int i) {
        return moveStrings[i].move;
    }

    void setInputter(PlayerInputterForm f) {
        inputter = f;
    }

    /**
     * Select moves on the movelist from playerInputter.selectedMoves
     */
    void setSelectedMoveList() {
        moveList.setSelectedIndices(inputter == null ? (new int[0]) : inputter.selectedMoves);
    }

    private String[] getListStrings() {
        String[] r = new String[moveStrings.length];
        for (int j = 0; j < moveStrings.length; ++j) {
            r[j] = moveStrings[j].str.output;
        }
        return r;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        moveList = new javax.swing.JList();
        okButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();

        setTitle(PlayerInputterForm.APP_NAME);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        moveList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = getListStrings();
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        moveList.setToolTipText("按Ctrl可多選不連續的招式、Shift多選連續的招式。");
        moveList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                moveListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(moveList);
        setSelectedMoveList();

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 357;
        gridBagConstraints.ipady = 203;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        okButton.setText("確定");
        okButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                okButtonMousePressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(okButton, gridBagConstraints);

        resetButton.setText("重設");
        resetButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                resetButtonMousePressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(resetButton, gridBagConstraints);

        jLabel1.setText("選擇招式：");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(jLabel1, gridBagConstraints);

        descriptionLabel.setText("招式說明");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(descriptionLabel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okButtonMousePressed
        this.setVisible(false);
    }//GEN-LAST:event_okButtonMousePressed

    private void resetButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetButtonMousePressed
        inputter.selectedMoves = new int[0];
        moveList.setSelectedIndices(inputter.selectedMoves);
        costOnSelectedMoves = 0;
        inputter.updatePointLeftLabel();
    }//GEN-LAST:event_resetButtonMousePressed

    private void moveListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveListMouseClicked
        descriptionLabel.setText(moveStrings[moveList.getLeadSelectionIndex()].move.getName() + "：" + moveStrings[moveList.getLeadSelectionIndex()].move.getDescription());
        inputter.selectedMoves = moveList.getSelectedIndices();
        costOnSelectedMoves = 0;
        for (int i = 0; i < inputter.selectedMoves.length; ++i) {
            costOnSelectedMoves += moveStrings[inputter.selectedMoves[i]].str.cost;
        }
        inputter.updatePointLeftLabel();
    }//GEN-LAST:event_moveListMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList moveList;
    private javax.swing.JButton okButton;
    private javax.swing.JButton resetButton;
    // End of variables declaration//GEN-END:variables
}
