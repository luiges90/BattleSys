/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * playerInputter.java
 *
 * Created on 2010年11月5日, 下午09:37:40
 */
package battlesys.frontend;

import battlesys.io.BattleSysLogger;
import battlesys.*;
import java.io.*;
import java.util.logging.Level;
import javax.swing.JOptionPane;

/**
 *
 * @author Peter
 */
public class PlayerInputterForm extends javax.swing.JFrame {

    public static final String APP_NAME = "N戰系統角色編制 / 耒戈氏@HKSAN";
    private int hp = 0, atk = 0, def = 0, spd = 0, mor = 0;
    private static final int totalPoint = Player.TOTAL_POINTS;
    private int pointLeft = totalPoint;
    int selectedMoves[] = new int[0];
    private static final PlayerChooseMoveForm chooseMoveForm = new PlayerChooseMoveForm();

    /** Creates new form playerInputter */
    public PlayerInputterForm() {
        //chooseMoveForm = new PlayerChooseMoveForm();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel9 = new javax.swing.JLabel();
        pointLeftLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        fileNameText = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        teamNameText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        hpText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        atkText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        defText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        spdText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        morText = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        basicMoveUsage = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        setMoveButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(APP_NAME);
        setBounds(new java.awt.Rectangle(8, 8, 8, 8));
        setMinimumSize(new java.awt.Dimension(400, 400));
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridLayout(12, 2, 8, 8));

        jLabel9.setText("剩下點數 Remaining Points");
        getContentPane().add(jLabel9);

        pointLeftLabel.setText("jLabel10");
        updatePointLeftLabel();
        pointLeftLabel.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                pointLeftLabelComponentAdded(evt);
            }
        });
        getContentPane().add(pointLeftLabel);

        jLabel8.setText("檔案名稱 File Name");
        getContentPane().add(jLabel8);

        fileNameText.setToolTipText("不可以以數字開始。");
        getContentPane().add(fileNameText);

        jLabel6.setText("名稱 Name");
        getContentPane().add(jLabel6);

        nameText.setToolTipText("在戰鬥中顯示的名稱");
        getContentPane().add(nameText);

        jLabel7.setText("隊伍名稱 Team Name");
        getContentPane().add(jLabel7);

        teamNameText.setToolTipText("在戰鬥中顯示的隊伍名稱。擁有相同隊伍名稱的角會被視為於同一個隊伍。");
        getContentPane().add(teamNameText);

        jLabel1.setText("體力點數 HP Points");
        getContentPane().add(jLabel1);

        hpText.setText("0");
        hpText.setToolTipText("當它跌至零時你就敗北了");
        hpText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                hpTextFocusLost(evt);
            }
        });
        getContentPane().add(hpText);

        jLabel2.setText("攻擊點數 Atk Points");
        getContentPane().add(jLabel2);

        atkText.setText("0");
        atkText.setToolTipText("數值愈高你的攻擊帶來的傷害愈高");
        atkText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                atkTextFocusLost(evt);
            }
        });
        getContentPane().add(atkText);

        jLabel3.setText("防禦點數 Def Poins");
        getContentPane().add(jLabel3);

        defText.setText("0");
        defText.setToolTipText("數值愈高敵軍對你的傷害愈少");
        defText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                defTextFocusLost(evt);
            }
        });
        getContentPane().add(defText);

        jLabel4.setText("速度點數 Spd Points");
        getContentPane().add(jLabel4);

        spdText.setText("0");
        spdText.setToolTipText("數值愈高愈容易命中對方及迴避對方攻擊");
        spdText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                spdTextFocusLost(evt);
            }
        });
        getContentPane().add(spdText);

        jLabel5.setText("鬥志點數 Mor Points");
        getContentPane().add(jLabel5);

        morText.setText("0");
        morText.setToolTipText("數值愈高愈容易暴擊及防止對方暴擊，以及影響非直接招式的成功率及效果 ");
        morText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                morTextFocusLost(evt);
            }
        });
        getContentPane().add(morText);

        jLabel10.setText("基本招式使用 Basic Move");
        getContentPane().add(jLabel10);

        basicMoveUsage.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "基本攻擊", "瞄準攻擊", "強力攻擊" }));
        getContentPane().add(basicMoveUsage);

        jLabel11.setText("招式購入 Get Moves");
        getContentPane().add(jLabel11);

        setMoveButton.setText("設定 Setup");
        setMoveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                setMoveButtonMousePressed(evt);
            }
        });
        getContentPane().add(setMoveButton);

        okButton.setText("生成 Generate");
        okButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                okButtonMousePressed(evt);
            }
        });
        getContentPane().add(okButton);

        exitButton.setText("關閉 Close");
        exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                exitButtonMousePressed(evt);
            }
        });
        getContentPane().add(exitButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void updatePointLeftLabel() {
        pointLeft = totalPoint - hp - atk - def - spd - mor - (chooseMoveForm == null ? 0 : chooseMoveForm.costOnSelectedMoves);
        pointLeftLabel.setText(pointLeft + "/" + totalPoint);
    }

    private void hpTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hpTextFocusLost
        if (FrontendUtility.checkNonnegativeTextField(this, hpText, "體力", APP_NAME)){
            hp = Integer.parseInt(hpText.getText());
        }
        updatePointLeftLabel();
    }//GEN-LAST:event_hpTextFocusLost

    private void atkTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_atkTextFocusLost
        if (FrontendUtility.checkNonnegativeTextField(this, atkText, "攻擊力", APP_NAME)){
            atk = Integer.parseInt(atkText.getText());
        }
        updatePointLeftLabel();
    }//GEN-LAST:event_atkTextFocusLost

    private void defTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_defTextFocusLost
        if (FrontendUtility.checkNonnegativeTextField(this, defText, "防禦力", APP_NAME)){
            def = Integer.parseInt(defText.getText());
        }
        updatePointLeftLabel();
    }//GEN-LAST:event_defTextFocusLost

    private void spdTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_spdTextFocusLost
        if (FrontendUtility.checkNonnegativeTextField(this, spdText, "速度", APP_NAME)){
            spd = Integer.parseInt(spdText.getText());
        }
        updatePointLeftLabel();
    }//GEN-LAST:event_spdTextFocusLost

    private void morTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_morTextFocusLost
        if (FrontendUtility.checkNonnegativeTextField(this, morText, "鬥志", APP_NAME)){
            mor = Integer.parseInt(morText.getText());
        }
        updatePointLeftLabel();
    }//GEN-LAST:event_morTextFocusLost

    private void exitButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMousePressed
        System.exit(0);
    }//GEN-LAST:event_exitButtonMousePressed

    private void writePlayerConstructor(BufferedWriter writer) throws IOException{
        writer.write("\tpublic " + fileNameText.getText() + "() throws BattleSysException{");
        writer.newLine();
        writer.write("\t\tsetName(\"" + nameText.getText() + "\");");
        writer.newLine();
        writer.write("\t\tsetTeamName(\"" + teamNameText.getText() + "\");");
        writer.newLine();
        writer.write("\t\tgiveHpPoint(" + hp + ");");
        writer.newLine();
        writer.write("\t\tgiveAtkPoint(" + atk + ");");
        writer.newLine();
        writer.write("\t\tgiveDefPoint(" + def + ");");
        writer.newLine();
        writer.write("\t\tgiveSpdPoint(" + spd + ");");
        writer.newLine();
        writer.write("\t\tgiveMorPoint(" + mor + ");");
        writer.newLine();
        for (int i = 0; i < selectedMoves.length; ++i) {
            writer.write("\t\tbuyAtk(\"" + chooseMoveForm.getMoveFromIndex(selectedMoves[i]).getClass().getSimpleName() + "\");");
            writer.newLine();
        }
        writer.write("\t}");
        writer.newLine();
        writer.newLine();
    }

    private void writePlayerMove(BufferedWriter writer) throws IOException {
        writer.write("\t@Override");
        writer.newLine();
        writer.write("\tpublic CompleteMoveResult move(PlayerList thisPlayers, PlayerList opposingPlayers, int round, int battleNo, RandomEventResult reResult, List<SingleMoveResult> mResult) throws BattleSysException {");
        writer.newLine();
        //write usage for bought moves - it is currently very basic one!
        for (int i = 0; i < selectedMoves.length; ++i){
            String moveName = chooseMoveForm.getMoveFromIndex(selectedMoves[i]).getClass().getSimpleName();
            writer.write("\t\tif (getMoveTime(\"" + moveName + "\") > 0){");
            writer.newLine();
            writer.write("\t\t\treturn useMove(\"" + moveName + "\", thisPlayers, opposingPlayers);");
            writer.newLine();
            writer.write("\t\t}");
            writer.newLine();
        }
        switch (basicMoveUsage.getSelectedIndex()) {
            case 0: {
                writer.write("\t\treturn useMove(\"basicAtk\", thisPlayers, opposingPlayers);");
                break;
            }
            case 1: {
                writer.write("\t\treturn useMove(\"aimedAtk\", thisPlayers, opposingPlayers);");
                break;
            }
            case 2: {
                writer.write("\t\treturn useMove(\"strongAtk\", thisPlayers, opposingPlayers);");
                break;
            }
        }
        writer.newLine();
        writer.write("\t}");
        writer.newLine();
    }

    private void writePlayerFile(BufferedWriter writer) throws IOException {
        //start write file.
        writer.write("package battlesys.playerCtrl23;");
        writer.newLine();
        writer.write("import battlesys.*;");
        writer.newLine();
        writer.write("import java.util.*;");
        writer.newLine();
        writer.write("import battlesys.exception.BattleSysException;");
        writer.newLine();
        writer.newLine();
        writer.write("public class " + fileNameText.getText() + " extends Player{");
        writer.newLine();
        writer.newLine();

        writePlayerConstructor(writer);

        writePlayerMove(writer);
        
        writer.write("}");
    }

    private static boolean isJavaIdentifier(String s){
        if (s.length() == 0) return false;
        if (!Character.isJavaIdentifierStart(s.charAt(0))) return false;
        for (int i = 1; i < s.length(); ++i){
            if (!Character.isJavaIdentifierPart(s.charAt(0))) return false;
        }
        return true;
    }

    private void okButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okButtonMousePressed
        if (pointLeft < 0) {
            JOptionPane.showMessageDialog(this, "此角色使用點數過多！", APP_NAME, JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (fileNameText.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "檔案名稱不可為空白！", APP_NAME, JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!isJavaIdentifier(fileNameText.getText())){
            JOptionPane.showMessageDialog(this, "檔案名稱格式錯誤！", APP_NAME, JOptionPane.ERROR_MESSAGE);
            return;
        }

        File outputFile = new File("src/battlesys/playerCtrl23/" + fileNameText.getText() + ".java");
        BufferedWriter writer;
        try {
            boolean fileCreated = outputFile.createNewFile();
            if (!fileCreated) {
                if (outputFile.exists()) {
                    int answer = JOptionPane.showConfirmDialog(this, "檔案已存在。是否要覆寫檔案？", APP_NAME, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (answer != JOptionPane.YES_OPTION) {
                        return;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "檔案名稱不合法", APP_NAME, JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            writer = new BufferedWriter(new FileWriter(outputFile));

            writePlayerFile(writer);

            writer.close();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "無法產生檔案", APP_NAME, JOptionPane.ERROR_MESSAGE);
            BattleSysLogger.getLogger().logp(Level.SEVERE, "playerInputter", "okButtonMousePressed", "無法產生檔案", ex);
            return;
        }

        JOptionPane.showMessageDialog(this, "檔案已成功產生，位置為" + outputFile.getPath(), APP_NAME, JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_okButtonMousePressed

    private void pointLeftLabelComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_pointLeftLabelComponentAdded
        updatePointLeftLabel();
    }//GEN-LAST:event_pointLeftLabelComponentAdded

    private void setMoveButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_setMoveButtonMousePressed
        chooseMoveForm.setVisible(true);
        chooseMoveForm.setInputter(this);
        updatePointLeftLabel();
    }//GEN-LAST:event_setMoveButtonMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayerInputterForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField atkText;
    private javax.swing.JComboBox basicMoveUsage;
    private javax.swing.JTextField defText;
    private javax.swing.JButton exitButton;
    private javax.swing.JTextField fileNameText;
    private javax.swing.JTextField hpText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField morText;
    private javax.swing.JTextField nameText;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel pointLeftLabel;
    private javax.swing.JButton setMoveButton;
    private javax.swing.JTextField spdText;
    private javax.swing.JTextField teamNameText;
    // End of variables declaration//GEN-END:variables
}
